on:
  workflow_call:
    inputs:
      role-to-assume:
        required: true
        type: string
      dockerfile-path:
        required: false
        type: string
      DOJO_URL:
        required: false
        type: string
      runner:
        required: false
        type: string
        default: "ubuntu-latest"
      environment:
        required: false
        type: string
        default: "production"
      enable_trivy:
        required: false
        type: boolean
        default: false
      cache-from:
        required: false
        type: string
        default: "type=gha"
      cache-to:
        required: false
        type: string
        default: "type=gha,mode=max"
      build-args:
        required: false
        type: string
      image-name:
        required: true
        type: string
      docker-build-platforms:
        required: false
        type: string
        default: "linux/amd64"
    secrets:
      AUTH_HEADER:
        description: 'Header used to authenticate in Defect Dojo'
        required: false
    outputs:
      tag:
        description: "Tag of the new built docker image"
        value: ${{ jobs.build.outputs.tag }}

jobs:
  build:
    name: Build Image and Push to ECR
    permissions:
      id-token: write
      contents: write
    env:
      IMAGE_TAG: ${{ github.sha }}
      DOJO_URL: ${{ inputs.DOJO_URL }}
    runs-on: ${{ inputs.runner }}
    outputs:
      tag: ${{ steps.set_github_run_number.outputs.outtag }}
    steps:
      - name: Checkout Git Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: GithubActionsSession

      - name: Authenticate with GCP
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: access_token
          service_account: artifact-registry-sa-dev@ubix-crossplane-gcp.iam.gserviceaccount.com
          project_id: 'ubix-crossplane-gcp'
          workload_identity_provider: 'projects/830786764024/locations/global/workloadIdentityPools/github/providers/gh-actions'
  
      - name: Login to GCR
        uses: docker/login-action@v3
        with:
          registry: us-east4-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set GITHUB_RUN_NUMBER
        id: set_github_run_number
        run: |
          echo GITHUB_RUN_NUMBER=$(( GITHUB_RUN_NUMBER + 279 ))>> $GITHUB_ENV
          echo "outtag=$((GITHUB_RUN_NUMBER + 279))" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ inputs.docker-build-platforms }}
          context: .
          push: true
          build-args: |
            ${{ inputs.build-args }}
          file: "${{ inputs.dockerfile-path }}/Dockerfile"
          cache-from: ${{ inputs.cache-from }}
          cache-to: ${{ inputs.cache-to }}
          tags: |
            882490700787.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.image-name }}:${{env.GITHUB_RUN_NUMBER}}
            us-east4-docker.pkg.dev/ubix-crossplane-gcp/artifact-registry/${{ inputs.image-name }}:${{env.GITHUB_RUN_NUMBER}}
            us-east4-docker.pkg.dev/ubix-crossplane-gcp/artifact-registry/${{ inputs.image-name }}:latest
            
      - name: Trivy vulnerability Scan and Import DefectDojo
        if: inputs.enable_trivy == true
        run: |
          #Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.45.1

          trivy image  --format json --exit-code  0 --ignore-unfixed --vuln-type  os,library --severity  CRITICAL,HIGH --output  ./results.json --timeout  20m0s  "${{ steps.login-ecr.outputs.registry }}/${{ inputs.image-name }}:${{env.GITHUB_RUN_NUMBER}}"

          #Import Scan in Defect Dojo
          #Date environment variables
          YEAR=`date +%Y`
          MONTH=`date +%B`
          SCAN_EXEC_DATE=`date +%Y-%m-%d`

          curl -X 'POST' \
            "${{env.DOJO_URL}}" \
            -H 'accept: application/json' \
            -H "Authorization: Token ${{ secrets.AUTH_HEADER }}" \
            -H 'Content-Type: multipart/form-data' \
            -H 'X-CSRFTOKEN: mycsrftoken' \
            -F 'product_type_name=' \
            -F 'active=true' \
            -F 'endpoint_to_add=' \
            -F 'verified=true' \
            -F 'close_old_findings=true' \
            -F 'test_title=' \
            -F "engagement_name=$YEAR $MONTH Security Report" \
            -F 'build_id=' \
            -F 'deduplication_on_engagement=true' \
            -F 'push_to_jira=false' \
            -F 'minimum_severity=Info' \
            -F 'close_old_findings_product_scope=false' \
            -F "scan_date=$SCAN_EXEC_DATE" \
            -F 'create_finding_groups_for_all_findings=true' \
            -F 'engagement_end_date=' \
            -F 'environment=Development' \
            -F "service=${{ inputs.image-name }}" \
            -F 'commit_hash=' \
            -F 'group_by=finding_title' \
            -F 'version=' \
            -F "tags=${{ inputs.image-name }}" \
            -F 'api_scan_configuration=' \
            -F 'product_name=Ubix' \
            -F "file=@results.json;type=application/json" \
            -F 'auto_create_context=' \
            -F 'lead=' \
            -F 'scan_type=Trivy Scan' \
            -F 'branch_tag=' \
            -F 'source_code_management_uri=' \
            -F 'engagement='
