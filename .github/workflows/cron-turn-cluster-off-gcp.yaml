name: Turn GCP Cluster off
on:
  workflow_call:
    inputs:
      gcp-cluster-name:
        required: true
        type: string
        description: "name of the GCP cluster to trigger the cluster automation workflow on. i.e master-gcp-01"
      runner:
        required: false
        type: string
        default: "ubuntu-22.04"
      repository:
        required: false
        type: string
        default: "Ubix/ubix-deployments"
    secrets:
      token:
        description: 'A token passed from the caller workflow'
        required: false

jobs:
  automate-cluster-on:
    name: Turn-Off GCP Cluster
    permissions:
      id-token: write
      contents: write
    runs-on: ${{ inputs.runner }}
    steps:
    
    - name: Validate GCP Cluster Name
      run: |
        if [ "${{ inputs.gcp-cluster-name }}" != "master-gcp-01" ]; then
          echo "Error: Unsupported GCP cluster name name '${{ inputs.gcp-cluster-name }}'. Supported values are 'master-gcp-01'. Exiting."
          exit 1
        fi

    - name: Checkout private tools
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        token: ${{ secrets.token }}
        ref: main

    - name: Install yq
      id: setup-yq
      uses: shiipou/setup-yq-action@v2.2.0

    - name: Disable NAP and Un-set Resource Limits in GCP Cloudspace
      run: |

        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

        CLOUDSPACE_VALUES_FILE_PATH="cloudspace/overlays/new-dev/gcp/${{ inputs.gcp-cluster-name }}/account"
        
        yq eval '.account.spec.gke.enableNAP = false' -i $CLOUDSPACE_VALUES_FILE_PATH/values.yaml

        yq eval '.account.spec.gke.resourceLimits = []' -i $CLOUDSPACE_VALUES_FILE_PATH/values.yaml

        git add $CLOUDSPACE_VALUES_FILE_PATH/values.yaml

        git diff-index --quiet --cached HEAD || git commit -m "AUTO: Disabled NAP and un-set Resource Limits in ${{ inputs.gcp-cluster-name }}"
        
        git push

    - name: Authenticate with GCP
      id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: access_token
        service_account: github-action-sa@ubix-crossplane-gcp.iam.gserviceaccount.com
        project_id: 'ubix-crossplane-gcp'
        workload_identity_provider: 'projects/830786764024/locations/global/workloadIdentityPools/github/providers/gh-actions'


    - name: Remove all nodepools in GKE
      run: |
          GCP_CLUSTER_NAME="${{ inputs.gcp-cluster-name }}"
          GCP_PROJECT="${{ inputs.gcp-cluster-name }}"
          GCP_REGION="us-east4"

          nodepools=$(gcloud container node-pools list --cluster $GCP_CLUSTER_NAME --region $GCP_REGION --project $GCP_PROJECT | grep -v NAME | awk '{print$1}')

          delete_nodepool() {
            local nodepool=$1
            local retries=10
            local count=0
            local success=false

            while [ $count -lt $retries ]; do
              echo "------ Attempting to delete $nodepool nodepool (try $((count+1))/$retries) -------"
              
              if gcloud container node-pools delete $nodepool --cluster $GCP_CLUSTER_NAME --region $GCP_REGION --project $GCP_PROJECT -q; then
                success=true
                echo "------ Successfully deleted $nodepool nodepool -------"
                break
              else
                echo "------ Failed to delete $nodepool nodepool. Retrying in 30 seconds... -------"
                sleep 60
                count=$((count+1))
              fi
            done

            if [ "$success" = false ]; then
              echo "------ Failed to delete $nodepool nodepool after $retries attempts -------"
            fi
          }

          for np in $nodepools; do
            delete_nodepool $np
          done

          
          nodepools=$(gcloud container node-pools list --cluster $GCP_CLUSTER_NAME --region $GCP_REGION --project $GCP_PROJECT | grep -v NAME | awk '{print$1}')

          if [ -n "$nodepools" ]; then
            for np in $nodepools
            do
              echo "------ Deleting $np nodepool -------"
              gcloud container node-pools delete $np --cluster $GCP_CLUSTER_NAME --region $GCP_REGION --project $GCP_PROJECT -q --async
            done
          else
            echo "No remaining node pools to delete."
          fi
